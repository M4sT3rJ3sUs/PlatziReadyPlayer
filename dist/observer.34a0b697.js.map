{"version":3,"sources":["ejercicios/observer/index.ts"],"names":[],"mappings":"AASA,IAAA,YAAA;AAAA;AAAA,YAAA;EAGE,SAAA,YAAA,GAAA;IAAA,IAAA,KAAA,GAAA,IAAA;;IAFA,KAAA,SAAA,GAAwB,EAAxB;IAGE,IAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;IACA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;MAC3B,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf;IACD,CAFD;EAGD;;EAED,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;IAC1B,KAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;IAC5B,IAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;MACxC,OAAO,GAAG,KAAK,QAAf;IACD,CAFa,CAAd;IAIA,KAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;EACD,CAND;;EAQA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;IACd,KAAK,SAAL,CAAe,OAAf,CAAuB,UAAA,QAAA,EAAQ;MAAI,OAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;IAAqB,CAAxD;EACD,CAFD;;EAGF,OAAA,YAAA;AAzBA,CAAA,EAAA;;AA2BA,IAAA,YAAA;AAAA;AAAA,YAAA;EAGE,SAAA,YAAA,GAAA;IACE,KAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;EACD;;EAED,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;IACd,KAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;EACD,CAFD;;EAGF,OAAA,YAAA;AAVA,CAAA,EAAA;;AAYA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AAEA,KAAK,CAAC,SAAN,CAAgB,OAAhB;AAEA,UAAU,CAAC,YAAA;EAAM,OAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAAA;AAA0B,CAAjC,EAAmC,IAAnC,CAAV","file":"observer.34a0b697.js","sourceRoot":"..","sourcesContent":["interface Observer {\n  update: (data: any) => void;\n}\n\ninterface Subject {\n  subscribe: (observer: Observer) => void;\n  unsubscribe: (observer: Observer) => void;\n}\n\nclass BitcoinPrice implements Subject {\n  observers: Observer[] = [];\n\n  constructor() {\n    const el: HTMLInputElement = document.querySelector('#value');\n    el.addEventListener('input', () => {\n      this.notify(el.value);\n    });\n  }\n\n  subscribe(observer: Observer) {\n    this.observers.push(observer);\n  }\n\n  unsubscribe(observer: Observer) {\n    const index = this.observers.findIndex(obs => {\n      return obs === observer;\n    });\n\n    this.observers.splice(index, 1);\n  }\n\n  notify(data: any) {\n    this.observers.forEach(observer => observer.update(data));\n  }\n}\n\nclass PriceDisplay implements Observer {\n  private el: HTMLElement;\n\n  constructor() {\n    this.el = document.querySelector('#price');\n  }\n\n  update(data: any) {\n    this.el.innerText = data;\n  }\n}\n\nconst value = new BitcoinPrice();\nconst display = new PriceDisplay();\n\nvalue.subscribe(display);\n\nsetTimeout(() => value.unsubscribe(display), 5000);\n"]}